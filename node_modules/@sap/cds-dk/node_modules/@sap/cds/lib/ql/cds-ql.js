const Query = require('./Query')
require = path => { // eslint-disable-line no-global-assign
  const clazz = module.require (path); if (!clazz._api) return clazz
  const factory = clazz._api()
  const constructor = Object.assign (function (...args) {
    if (new.target) return new clazz (...args)  // allows: new SELECT
    return factory (...args)                   // allows: SELECT(...).from()
  }, factory)                                 // allows: SELECT.from()
  constructor.class = clazz
  return constructor
}

module.exports = exports = {
  Query,
  SELECT: require('./SELECT'),
  INSERT: require('./INSERT'),
  UPSERT: require('./UPSERT'),
  UPDATE: require('./UPDATE'),
  DELETE: require('./DELETE'),
  CREATE: require('./CREATE'),
  DROP:   require('./DROP'),
}

exports.clone = function (q,_) {
  return Query.prototype.clone.call(q,_)
}

exports.query = function (q) {
  if (q instanceof Query) return q
  for (let k in q) return k in this ? new this[k](q[k]) : q
}

exports._reset = ()=>{ // for strange tests only
  const cds = require('../index')
  const _name = cds.env.sql.names === 'quoted' ? n =>`"${n}"` : n => n.replace(/[.:]/g,'_')
  Object.defineProperty (Query.prototype,'valueOf',{ configurable:1, value: function(kind=this.kind) {
    return `${kind} ${_name(this._target.name)} `
  }})
  return this
}
