module.exports = Object.assign(debug, {
    options: ['--port', '--host'],
    shortcuts: [],
    flags: [/*'--vscode', '--k8s'*/],
    help: `
# SYNOPSIS

    *cds debug* [<app>]

    Debugs a CAP-based application in the Chrome Developer Tools.

    If <app> is given, it's assumed to be running on the currently logged-in Cloud Foundry space.

    If no <app> is given, the app in the current working is started with 'cds watch --debug'.

# OPTIONS

    *--host* the debug host (default: '127.0.0.1')

    *--port* the debug port (default: 9229)

# EXAMPLES

    *cds debug*
    *cds debug* bookshop-srv
`})

async function debug() {
  const cds = require('../lib/cds')
  const { fork, spawn, execSync, exec } = require('node:child_process')
  const os = require('node:os').platform()

  const [appName] = cds.cli.argv
  const { port = 9229, host = '127.0.0.1', vscode } = cds.cli.options
  const ide = vscode ? 'vscode' : 'chrome'

  if (!appName) { // local app
    const script = process.argv[1] // `.../cds` or `.../cds-tsx`
    console.log(`Starting '${cds.utils.path.basename(script)} watch --debug'`)
    fork(script, ['watch', '--debug']).on('error', e => { throw 'Failed to start debug process:' + e.message })
  } else if (cds.cli.options.k8s) { // Kyma/Kubernetes
    // to be implemented
  } else { // Cloud Foundry
    const script = `ps aux | grep '[n]ode' | awk '{print \\$2}' | head -n 1`
    const pid = execSync(`cf ssh ${appName} -c "${script}"`, { encoding: 'utf-8', shell: true }).trim()
    if (!pid) throw `Node.js process for app '${appName}' not found`
    execSync(`cf ssh ${appName} -c "kill -usr1 ${pid}"`, { stdio: 'inherit' })
    console.log(`Opening SSH tunnel for CF app '${appName}'`)
    spawn('cf', ['ssh', '-N', '-L', `${port}:${host}:${port}`, appName], { stdio: 'inherit' })
  }

  const maxAttempts = 15
  let attempts = 0

  const openDevTools = async () => {
    attempts++
    try {
      switch (ide) {
        case 'chrome': {
          const res = await fetch(`http://localhost:${port}/json/list`)
          const data = await res.json()
          if (!data?.length) throw 'No debugger found on port ' + port
          const wsUrl = data[0].webSocketDebuggerUrl
          let command
          const url = `devtools://devtools/bundled/inspector.html?ws=${wsUrl.split('ws://')[1]}`
          console.log(`Opening Chrome DevTools at ${url}`)
          if (os === 'darwin') {
            command = `open -a "Google Chrome" '${url}'`
          } else if (os === 'win32') {
            command = `start chrome "${url}"`
          } else {
            command = `google-chrome '${url}' || chromium-browser '${url}' || chromium '${url}'`
          }
          exec(command, (error) => { if (error) throw 'Failed to open DevTools: ' + error.message })
          break
        }
        case 'vscode': {
          // to be implemented
        }
      }
    } catch (err) {
      if (attempts < maxAttempts) {
        setTimeout(openDevTools, 1000) // connection fails sometimes, retry
      } else {
        throw `Failed to connect to debugger after ${maxAttempts} attempts: ${err}`
      }
    }
  }
  openDevTools()
}
